"""
S7SiCADA.py – S7SiCADA Python CLI Tool
Author: Marko Lazarević
Version: 1.0.0

Description:
    S7SiCADA is a Python-based utility that auto-generates C# code
    from Siemens TIA Portal .db source files.

Usage Examples:
    $ S7SiCADA --plc-prefix MyPLC --tia-portal-source ./MyDB.db
    $ S7SiCADA --list
"""

from __future__ import annotations
import argparse
import logging
import sys
from typing import Optional
from pathlib import Path
from PLC import add_plc

__author__ = "Marko Lazarević"
__version__ = "1.0.0"
AGP = Path(__file__).resolve().parent.parent.joinpath("src", "AutoGenerated")

# -----------------------------------------------------------------------------
# Business Logic
# -----------------------------------------------------------------------------

def list_plcs(directory: Path = Path(".")) -> None:
    """List contents of the specified directory."""
    print("📂 Listing existing PLCs")
    for item in sorted(AGP.iterdir()):
        print(f" - {item.name}")
    sys.exit(0)


def validate_args(args: argparse.Namespace, parser: argparse.ArgumentParser) -> None:
    """Additional validation after parsing."""
    if not args.plc_prefix.strip():
        parser.error("--plc-prefix cannot be empty or whitespace.")

    source = Path(args.tia_portal_source)
    if not source.exists():
        parser.error(f"TIA Portal source file not found: {source}")


# -----------------------------------------------------------------------------
# CLI Parser
# -----------------------------------------------------------------------------
def parse_args(argv: Optional[list[str]] = None) -> argparse.Namespace:
    """Parse and validate command-line arguments."""
    parser = argparse.ArgumentParser(
        prog="S7SiCADA",
        description="S7SiCADA — Auto-generate C# code based on TIA Portal .db source files.",
        epilog=(
            "Example usage:\n"
            "  S7SiCADA --plc-prefix MyPLC --tia-portal-source ./MyDB.db\n\n"
            "Example in C#:\n"
            "  S7SiCADA.MyPLC.myDb.myVar.CV = 3.14;"
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "-a", "--add-plc",
        help="List current directory contents and exit.",
    )

    parser.add_argument(
        "-l", "--list",
        action="store_true",
        help="List current directory contents and exit.",
    )

    parser.add_argument(
        "-p", "--plc-prefix",
        metavar="PLC_PREFIX",
        help="Prefix used to access PLC data (e.g., 'MyPLC').",
    )

    parser.add_argument(
        "-s", "--tia-portal-source",
        metavar="PATH",
        help="Path to the TIA Portal .db source file (e.g., './data/MyPLC.db').",
    )

    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"%(prog)s {__version__}",
    )

    args = parser.parse_args(argv)

    # Handle special mode early
    if args.list:
        list_plcs()

    if args.add_plc:
        add_plc(AGP, args.add_plc)

    # Require both args for generation mode
    if not args.plc_prefix or not args.tia_portal_source:
        parser.error("Both --plc-prefix and --tia-portal-source are required unless using --list.")

    validate_args(args, parser)
    return args


# -----------------------------------------------------------------------------
# Main Entry Point
# -----------------------------------------------------------------------------
def main(argv: Optional[list[str]] = None) -> None:
    """Main entry point for the CLI."""
    try:
        args = parse_args(argv)
    except Exception as exc:
        print(f"Error parsing arguments: {exc}")
        sys.exit(1)


if __name__ == "__main__":
    main()
