"""
SiCADA.py – SiCADA Python CLI Tool
Author: Marko Lazarević
Version: 1.0.0

Description:
    SiCADA is a Python-based utility that auto-generates C# code
    from Siemens TIA Portal .db source files.

Usage Examples:
    $ SiCADA --plc-prefix MyPLC --tia-portal-source ./MyDB.db
    $ SiCADA list
"""

from __future__ import annotations
import argparse
import logging
import sys
from typing import Optional
from pathlib import Path
from PLC import add_plc, list_plcs, delete_plc

__author__ = "Marko Lazarević"
__version__ = "1.0.0"

# Path to the AutoGenerated folder in the project structure
AGP = Path(__file__).resolve().parent.parent / "src" / "AutoGenerated"

# -----------------------------------------------------------------------------
# Argument Validation
# -----------------------------------------------------------------------------

def validate_args(args: argparse.Namespace, parser: argparse.ArgumentParser) -> None:
    """
    Additional validation logic after argparse has parsed input.

    Args:
        args (Namespace): Parsed command-line arguments.
        parser (ArgumentParser): The parser object, used to show errors.
    """

# -----------------------------------------------------------------------------
# CLI Parser Setup
# -----------------------------------------------------------------------------

def parse_args(argv: Optional[list[str]] = None) -> argparse.Namespace:
    """
    Parse and validate command-line arguments.

    Args:
        argv (list[str], optional): List of arguments, or None to use sys.argv.

    Returns:
        Namespace: Parsed arguments.
    """
    parser = argparse.ArgumentParser(
        prog="SiCADA.py",
        description="SiCADA.py — Python utility for SiCADA C# library.",
        epilog=(
            "This utility is based on the SiCADA .sln structure — do not modify the structure manually!\nAdd SiCADA to existing project or add a project reference!"
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    subparsers = parser.add_subparsers(dest="command", required=False)

    # `list` subcommand
    subparsers.add_parser("list", help="List all PLCs in SiCADA library")

    # `add` subcommand
    add_parse = subparsers.add_parser("add", help="Add a new PLC to the SiCADA library(creates folder C# files)")
    add_parse.add_argument("plc_name", help="This")

    # `remove` subcommand
    remove_parse = subparsers.add_parser("remove", help="Remove an existing PLC and its generated code")
    remove_parse.add_argument("plc_name", help="Name of the PLC to remove")

    # Version flag
    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"%(prog)s {__version__}",
    )

    args = parser.parse_args(argv)

    # Early dispatch: handle subcommands immediately
    if args.command == "list":
        list_plcs(AGP)

    if args.command == "add":
        add_plc(AGP, args.plc_name)

    if args.command == "remove":
        delete_plc(AGP, args.plc_name)

    validate_args(args, parser)
    return args

# -----------------------------------------------------------------------------
# Main Entry Point
# -----------------------------------------------------------------------------

def main(argv: Optional[list[str]] = None) -> None:
    """
    Main entry point for the SiCADA CLI.
    """
    try:
        args = parse_args(argv)
    except Exception as exc:
        print(f"Error: {exc}")
        sys.exit(1)


if __name__ == "__main__":
    main()
