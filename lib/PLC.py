import sys
from pathlib import Path
import shutil
from datetime import datetime

def add_plc(AGP: Path, plc_name: str) -> None:
    """
    Adds a new PLC by creating a folder under the AutoGenerated directory.
    If a folder with the same name already exists, prompts the user for confirmation
    before overwriting it (which will remove all existing content).
    
    Args:
        AGP (Path): Path to the AutoGenerated base directory.
        plc_name (str): Name of the PLC to add.
    """
    # Clean up user input by stripping leading/trailing whitespace
    sanitized_name = plc_name.strip()
    if not sanitized_name:
        print("PLC name cannot be empty or whitespace.")
        sys.exit(1)

    plc_path = AGP / sanitized_name

    # Check if the target directory already exists
    if plc_path.exists():
        response = input(
            f"PLC '{sanitized_name}' already exists. Overwrite? "
            "All linked DBs will be lost! [y/N]: "
        ).strip().lower()
        
        if response != "y":
            print("Aborted.")
            sys.exit(0)
        else:
            # Delete the existing PLC directory before recreating
            shutil.rmtree(plc_path)
            print(f"Overwriting existing PLC '{sanitized_name}'...")

    # Attempt to create the new PLC directory
    try:
        plc_path.mkdir(parents=True, exist_ok=False)
        print(f"PLC '{sanitized_name}' has been added at {plc_path}.")
    except Exception as exc:
        print(f"Failed to create PLC directory '{sanitized_name}': {exc}")
        sys.exit(1)

    # Generate boilerplate C# class content with timestamp
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    boilerplate = f"""// ===============================================================
//  ⚠ WARNING: THIS FILE IS AUTO-GENERATED BY SiCADA v1.0.0
// ---------------------------------------------------------------
//  DO NOT EDIT THIS FILE MANUALLY!
//  Any changes will be overwritten when the code is regenerated
//  and may cause unexpected behavior.
// ---------------------------------------------------------------
//  Auto-generated:  {now}
// ===============================================================

public static partial class SiCADA
{{
    public static c{plc_name}? {plc_name};
    public partial class c{plc_name} : S7Accumulator
    {{
        // DB_DECLARATIONS
        // END_DB_DECLARATIONS
        public c{plc_name}
            (
            int accumulatorPort,
            S7.Net.CpuType cpuType,
            string plcIp,
            short plcRack,
            short plcSlot
            ) : base
            (
                accumulatorPort, 
                cpuType, 
                plcIp,
                plcRack,
                plcSlot
            )
        {{
            // DB_INSTANTIATIONS
            // END_DB_INSTANTIATIONS
        }}
    }}
}}
"""

    # Write the boilerplate code to a .cs file inside the PLC folder
    file_path = plc_path / f"c{sanitized_name}.cs"
    try:
        file_path.write_text(boilerplate, encoding="utf-8")
        print(f"Created placeholder file: {file_path}")
    except Exception as exc:
        print(f"Failed to create file '{file_path}': {exc}")
        sys.exit(1)

    sys.exit(0)


def list_plcs(AGP: Path) -> None:
    """
    Lists all PLCs (folders) under the AutoGenerated directory.

    Args:
        AGP (Path): Path to the AutoGenerated base directory.
    """
    for item in sorted(AGP.iterdir()):
        print(f" - {item.name}")
    sys.exit(0)


def delete_plc(AGP: Path, plc_name: str) -> None:
    """
    Deletes an existing PLC by removing its folder from the AutoGenerated directory.
    Asks for confirmation before performing the deletion.

    Args:
        AGP (Path): Path to the AutoGenerated base directory.
        plc_name (str): Name of the PLC to delete.
    """
    plc_path = AGP / plc_name
    exists = False

    # Check for exact match (case-sensitive) among immediate subdirectories
    for path in AGP.iterdir():
        if path.is_dir() and path.name == plc_name:
            exists = True
            break  # Found it; no need to keep looking

    if not exists:
        print(f"PLC '{plc_name}' does not exist.")
        sys.exit(1)

    # Confirm deletion with user
    response = input(
        f"Are you sure you want to delete PLC '{plc_name}'? "
        "This action cannot be undone. [y/N]: "
    ).strip().lower()
    
    if response != "y":
        print("Aborted.")
        sys.exit(0)

    # Delete the directory and report success
    try:
        shutil.rmtree(plc_path)
        print(f"Deleting: {plc_path}")
        print(f"PLC '{plc_name}' has been deleted.")
    except Exception as exc:
        print(f"Failed to delete PLC directory '{plc_name}': {exc}")
        sys.exit(1)

    sys.exit(0)
