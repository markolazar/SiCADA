import sys
from pathlib import Path
import shutil
from datetime import datetime

def add_plc(AGP: Path, plc_name: str) -> None:
    """
    Add a new PLC by creating a folder under the AutoGenerated directory.
    If the folder already exists, ask the user whether to overwrite it.

    Args:
        AGP (Path): Base AutoGenerated directory.
        plc_name (str): Name of the PLC to add.
    """
    # Sanitize the name
    sanitized_name = plc_name.strip()
    if not sanitized_name:
        print("PLC name cannot be empty or whitespace.")
        sys.exit(1)

    plc_path = AGP / sanitized_name

    # Check if directory exists
    if plc_path.exists():
        response = input(f"PLC '{sanitized_name}' already exists. Overwrite? [y/N]: ").strip().lower()
        if response != "y":
            print("Aborted.")
            sys.exit(0)
        else:
            # Delete the existing folder before recreating
            shutil.rmtree(plc_path)
            print(f"Overwriting existing PLC '{sanitized_name}'...")

    # Create directory
    try:
        plc_path.mkdir(parents=True, exist_ok=False)
        print(f"PLC '{sanitized_name}' has been added at {plc_path}.")
    except Exception as exc:
        print(f"Failed to create PLC directory '{sanitized_name}': {exc}")
        sys.exit(1)


    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    boilerplate = f"""// ===============================================================
//  ⚠ WARNING: THIS FILE IS AUTO-GENERATED BY SiCADA v1.0.0
// ---------------------------------------------------------------
//  DO NOT EDIT THIS FILE MANUALLY!
//  Any changes will be overwritten when the code is regenerated
//  and may cause unexpected behavior.
// ---------------------------------------------------------------
//  Auto-generated:  {now}
// ===============================================================

public static partial class SiCADA
{{
    public static c{plc_name}? {plc_name};
    public partial class c{plc_name} : S7Accumulator
    {{
        // DB_DECLARATIONS
        // END_DB_DECLARATIONS
        public c{plc_name}
            (
            int accumulatorPort,
            S7.Net.CpuType cpuType,
            string plcIp,
            short plcRack,
            short plcSlot
            ) : base
            (
                accumulatorPort, 
                cpuType, 
                plcIp,
                plcRack,
                plcSlot
            )
        {{
            // DB_INSTANTIATIONS
            // END_DB_INSTANTIATIONS
        }}
    }}
}}
"""


    # Create placeholder .cs file
    file_path = plc_path / f"c{sanitized_name}.cs"
    try:
        file_path.write_text(boilerplate, encoding="utf-8")
        print(f"Created placeholder file: {file_path}")
    except Exception as exc:
        print(f"Failed to create file '{file_path}': {exc}")
        sys.exit(1)

    sys.exit(0)

def list_plcs(AGP: Path) -> None:
    """List contents of the specified directory."""
    for item in sorted(AGP.iterdir()):
        print(f" - {item.name}")
    sys.exit(0)